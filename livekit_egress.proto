syntax = "proto3";

package livekit;
option go_package = "github.com/livekit/protocol/livekit";
option csharp_namespace = "LiveKit.Proto";
option ruby_package = "LiveKit::Proto";

service Egress {
  // start recording or streaming a room, participant, or tracks
  rpc StartRoomEgress(RoomEgressRequest) returns (EgressInfo);
  rpc StartParticipantEgress(ParticipantEgressRequest) returns (EgressInfo);
  rpc StartTrackEgress(TrackEgressRequest) returns (EgressInfo);

  // add or remove stream endpoints
  rpc UpdateStream(UpdateStreamRequest) returns (EgressInfo);

  // add or remove tracks
  rpc UpdateTrackEgress(UpdateTrackEgressRequest) returns (EgressInfo);

  // stop a recording or stream
  rpc StopEgress(StopEgressRequest) returns (EgressInfo);
}

// composite all tracks from room
message RoomEgressRequest {
  string room_name = 1;         // required
  string layout = 2;            // required
  bool audio_only = 3;          // (default false)
  bool video_only = 4;          // (default false)
  string custom_base_url = 5;   // (default https://recorder.livekit.io)
  oneof output {                // required
    FileOutput file = 6;
    StreamOutput stream = 7;
  }
  oneof options {
    OptionPreset preset = 8;
    AdvancedOptions advanced = 9;
  }
}

// composite a single audio and video track
message ParticipantEgressRequest {
  string room_name = 1;      // required
  string audio_track_id = 2; // required
  string video_track_id = 3; // required
  oneof output {             // required
    FileOutput file = 4;
    StreamOutput stream = 5;
  }
  oneof options {
    OptionPreset preset = 6;
    AdvancedOptions advanced = 7;
  }
}

// record tracks individually
message TrackEgressRequest {
  string room_name = 1;  // required
  oneof tracks {         // required
    bool all_tracks = 2;
    bool all_audio_tracks = 3;
    bool all_video_tracks = 4;
    TrackList track_list = 5;
  }
}

message TrackList {
  repeated string track_ids = 1;
}

message FileOutput {
  FileType file_type = 1; // required
}

enum FileType {
  OGG = 0;
  OPUS = 1;
  H264 = 2;
  MP3 = 3;
  MP4 = 4;
}

message StreamOutput {
  StreamProtocol stream_protocol = 1; // required
  repeated string urls = 2;           // required
}

enum StreamProtocol {
  RTMP = 0;
  RTSP = 1;
}

message AdvancedOptions {
  int32 width = 1;             // (default 1920)
  int32 height = 2;            // (default 1080)
  int32 depth = 3;             // (default 24)
  int32 framerate = 4;         // (default 30)
  int32 audio_bitrate = 5;     // (default 128)
  int32 audio_frequency = 6;   // (default 44100)
  int32 video_bitrate = 7;     // (default 4500)
  EncodingProfile profile = 8; // (default PROFILE_MAIN)
}

enum OptionPreset {
  NONE = 0;
  HD_30 = 1;      // 720p,  30fps, 3000kpbs
  HD_60 = 2;      // 720p,  60fps, 4500kbps
  FULL_HD_30 = 3; // 1080p, 30fps, 4500kbps
  FULL_HD_60 = 4; // 1080p, 60fps, 6000kbps
}

enum EncodingProfile {
  PROFILE_DEFAULT = 0;
  PROFILE_BASELINE = 1; // maximum compatibility
  PROFILE_MAIN = 2;     // modern devices and web playback
  PROFILE_HIGH = 3;     // best quality and compression
}

message UpdateStreamRequest {
  string egress_id = 1;
  repeated string add_output_urls = 2;
  repeated string remove_output_urls = 3;
}

message UpdateTrackEgressRequest {
  string egress_id = 1;
  repeated string start_track_ids = 2;
  repeated string stop_track_ids = 3;
}

message StopEgressRequest {
  string egress_id = 1;
}

message EgressInfo {
  string egress_id = 1;
  string room_id = 2;
  string room_name = 3;
  bool active = 4;
  oneof info {
    RoomEgressInfo room = 5;
    ParticipantEgressInfo participant = 6;
    TrackEgressInfoList track = 7;
  }
}

message RoomEgressInfo {
  RoomEgressRequest request = 1;
  int64 started_at = 2;
  int64 ended_at = 3;
  string error = 4;
}

message ParticipantEgressInfo {
  ParticipantEgressRequest request = 1;
  int64 started_at = 2;
  int64 ended_at = 3;
  string error = 4;
}

message TrackEgressInfoList {
  TrackEgressRequest request = 1;
  repeated TrackEgressInfo track_info = 2;
}

message TrackEgressInfo {
  string track_id = 1;
  FileType file_type = 2;
  int64 started_at = 3;
  int64 ended_at = 4;
  string error = 5;
}
