// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: livekit_egress.proto

package livekit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OptionPreset int32

const (
	OptionPreset_HD_30      OptionPreset = 0 // 720p,  30fps, 3000kpbs
	OptionPreset_HD_60      OptionPreset = 1 // 720p,  60fps, 4500kbps
	OptionPreset_FULL_HD_30 OptionPreset = 2 // 1080p, 30fps, 4500kbps
	OptionPreset_FULL_HD_60 OptionPreset = 3 // 1080p, 60fps, 6000kbps
)

// Enum value maps for OptionPreset.
var (
	OptionPreset_name = map[int32]string{
		0: "HD_30",
		1: "HD_60",
		2: "FULL_HD_30",
		3: "FULL_HD_60",
	}
	OptionPreset_value = map[string]int32{
		"HD_30":      0,
		"HD_60":      1,
		"FULL_HD_30": 2,
		"FULL_HD_60": 3,
	}
)

func (x OptionPreset) Enum() *OptionPreset {
	p := new(OptionPreset)
	*p = x
	return p
}

func (x OptionPreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionPreset) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_egress_proto_enumTypes[0].Descriptor()
}

func (OptionPreset) Type() protoreflect.EnumType {
	return &file_livekit_egress_proto_enumTypes[0]
}

func (x OptionPreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionPreset.Descriptor instead.
func (OptionPreset) EnumDescriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{0}
}

type EncodingProfile int32

const (
	EncodingProfile_PROFILE_BASELINE EncodingProfile = 0 // maximum compatibility
	EncodingProfile_PROFILE_MAIN     EncodingProfile = 1 // modern devices and web playback
	EncodingProfile_PROFILE_HIGH     EncodingProfile = 2 // best quality and compression
)

// Enum value maps for EncodingProfile.
var (
	EncodingProfile_name = map[int32]string{
		0: "PROFILE_BASELINE",
		1: "PROFILE_MAIN",
		2: "PROFILE_HIGH",
	}
	EncodingProfile_value = map[string]int32{
		"PROFILE_BASELINE": 0,
		"PROFILE_MAIN":     1,
		"PROFILE_HIGH":     2,
	}
)

func (x EncodingProfile) Enum() *EncodingProfile {
	p := new(EncodingProfile)
	*p = x
	return p
}

func (x EncodingProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_egress_proto_enumTypes[1].Descriptor()
}

func (EncodingProfile) Type() protoreflect.EnumType {
	return &file_livekit_egress_proto_enumTypes[1]
}

func (x EncodingProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingProfile.Descriptor instead.
func (EncodingProfile) EnumDescriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{1}
}

// composite all tracks from room
type RoomEgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName      string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`                  // required
	Layout        string `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`                                      // required
	AudioOnly     bool   `protobuf:"varint,3,opt,name=audio_only,json=audioOnly,proto3" json:"audio_only,omitempty"`              // (default false)
	VideoOnly     bool   `protobuf:"varint,4,opt,name=video_only,json=videoOnly,proto3" json:"video_only,omitempty"`              // (default false)
	CustomBaseUrl string `protobuf:"bytes,5,opt,name=custom_base_url,json=customBaseUrl,proto3" json:"custom_base_url,omitempty"` // (default https://recorder.livekit.io)
	// Types that are assignable to Output:
	//	*RoomEgressRequest_File
	//	*RoomEgressRequest_Stream
	Output isRoomEgressRequest_Output `protobuf_oneof:"output"`
	// Types that are assignable to Options:
	//	*RoomEgressRequest_Preset
	//	*RoomEgressRequest_Advanced
	Options isRoomEgressRequest_Options `protobuf_oneof:"options"`
}

func (x *RoomEgressRequest) Reset() {
	*x = RoomEgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomEgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEgressRequest) ProtoMessage() {}

func (x *RoomEgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEgressRequest.ProtoReflect.Descriptor instead.
func (*RoomEgressRequest) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{0}
}

func (x *RoomEgressRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RoomEgressRequest) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *RoomEgressRequest) GetAudioOnly() bool {
	if x != nil {
		return x.AudioOnly
	}
	return false
}

func (x *RoomEgressRequest) GetVideoOnly() bool {
	if x != nil {
		return x.VideoOnly
	}
	return false
}

func (x *RoomEgressRequest) GetCustomBaseUrl() string {
	if x != nil {
		return x.CustomBaseUrl
	}
	return ""
}

func (m *RoomEgressRequest) GetOutput() isRoomEgressRequest_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *RoomEgressRequest) GetFile() *FileOutput {
	if x, ok := x.GetOutput().(*RoomEgressRequest_File); ok {
		return x.File
	}
	return nil
}

func (x *RoomEgressRequest) GetStream() *StreamOutput {
	if x, ok := x.GetOutput().(*RoomEgressRequest_Stream); ok {
		return x.Stream
	}
	return nil
}

func (m *RoomEgressRequest) GetOptions() isRoomEgressRequest_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *RoomEgressRequest) GetPreset() OptionPreset {
	if x, ok := x.GetOptions().(*RoomEgressRequest_Preset); ok {
		return x.Preset
	}
	return OptionPreset_HD_30
}

func (x *RoomEgressRequest) GetAdvanced() *AdvancedOptions {
	if x, ok := x.GetOptions().(*RoomEgressRequest_Advanced); ok {
		return x.Advanced
	}
	return nil
}

type isRoomEgressRequest_Output interface {
	isRoomEgressRequest_Output()
}

type RoomEgressRequest_File struct {
	File *FileOutput `protobuf:"bytes,6,opt,name=file,proto3,oneof"`
}

type RoomEgressRequest_Stream struct {
	Stream *StreamOutput `protobuf:"bytes,7,opt,name=stream,proto3,oneof"`
}

func (*RoomEgressRequest_File) isRoomEgressRequest_Output() {}

func (*RoomEgressRequest_Stream) isRoomEgressRequest_Output() {}

type isRoomEgressRequest_Options interface {
	isRoomEgressRequest_Options()
}

type RoomEgressRequest_Preset struct {
	Preset OptionPreset `protobuf:"varint,8,opt,name=preset,proto3,enum=livekit.OptionPreset,oneof"`
}

type RoomEgressRequest_Advanced struct {
	Advanced *AdvancedOptions `protobuf:"bytes,9,opt,name=advanced,proto3,oneof"`
}

func (*RoomEgressRequest_Preset) isRoomEgressRequest_Options() {}

func (*RoomEgressRequest_Advanced) isRoomEgressRequest_Options() {}

// composite a single audio and video track
type ParticipantEgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName     string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`               // required
	AudioTrackId string `protobuf:"bytes,2,opt,name=audio_track_id,json=audioTrackId,proto3" json:"audio_track_id,omitempty"` // required
	VideoTrackId string `protobuf:"bytes,3,opt,name=video_track_id,json=videoTrackId,proto3" json:"video_track_id,omitempty"` // required
	// Types that are assignable to Output:
	//	*ParticipantEgressRequest_File
	//	*ParticipantEgressRequest_Stream
	Output isParticipantEgressRequest_Output `protobuf_oneof:"output"`
	// Types that are assignable to Options:
	//	*ParticipantEgressRequest_Preset
	//	*ParticipantEgressRequest_Advanced
	Options isParticipantEgressRequest_Options `protobuf_oneof:"options"`
}

func (x *ParticipantEgressRequest) Reset() {
	*x = ParticipantEgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantEgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantEgressRequest) ProtoMessage() {}

func (x *ParticipantEgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantEgressRequest.ProtoReflect.Descriptor instead.
func (*ParticipantEgressRequest) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipantEgressRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ParticipantEgressRequest) GetAudioTrackId() string {
	if x != nil {
		return x.AudioTrackId
	}
	return ""
}

func (x *ParticipantEgressRequest) GetVideoTrackId() string {
	if x != nil {
		return x.VideoTrackId
	}
	return ""
}

func (m *ParticipantEgressRequest) GetOutput() isParticipantEgressRequest_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *ParticipantEgressRequest) GetFile() *FileOutput {
	if x, ok := x.GetOutput().(*ParticipantEgressRequest_File); ok {
		return x.File
	}
	return nil
}

func (x *ParticipantEgressRequest) GetStream() *StreamOutput {
	if x, ok := x.GetOutput().(*ParticipantEgressRequest_Stream); ok {
		return x.Stream
	}
	return nil
}

func (m *ParticipantEgressRequest) GetOptions() isParticipantEgressRequest_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *ParticipantEgressRequest) GetPreset() OptionPreset {
	if x, ok := x.GetOptions().(*ParticipantEgressRequest_Preset); ok {
		return x.Preset
	}
	return OptionPreset_HD_30
}

func (x *ParticipantEgressRequest) GetAdvanced() *AdvancedOptions {
	if x, ok := x.GetOptions().(*ParticipantEgressRequest_Advanced); ok {
		return x.Advanced
	}
	return nil
}

type isParticipantEgressRequest_Output interface {
	isParticipantEgressRequest_Output()
}

type ParticipantEgressRequest_File struct {
	File *FileOutput `protobuf:"bytes,4,opt,name=file,proto3,oneof"`
}

type ParticipantEgressRequest_Stream struct {
	Stream *StreamOutput `protobuf:"bytes,5,opt,name=stream,proto3,oneof"`
}

func (*ParticipantEgressRequest_File) isParticipantEgressRequest_Output() {}

func (*ParticipantEgressRequest_Stream) isParticipantEgressRequest_Output() {}

type isParticipantEgressRequest_Options interface {
	isParticipantEgressRequest_Options()
}

type ParticipantEgressRequest_Preset struct {
	Preset OptionPreset `protobuf:"varint,6,opt,name=preset,proto3,enum=livekit.OptionPreset,oneof"`
}

type ParticipantEgressRequest_Advanced struct {
	Advanced *AdvancedOptions `protobuf:"bytes,7,opt,name=advanced,proto3,oneof"`
}

func (*ParticipantEgressRequest_Preset) isParticipantEgressRequest_Options() {}

func (*ParticipantEgressRequest_Advanced) isParticipantEgressRequest_Options() {}

// record tracks individually
type TrackEgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"` // required
	// Types that are assignable to Tracks:
	//	*TrackEgressRequest_AllTracks
	//	*TrackEgressRequest_AllAudioTracks
	//	*TrackEgressRequest_AllVideoTracks
	//	*TrackEgressRequest_TrackList
	Tracks isTrackEgressRequest_Tracks `protobuf_oneof:"tracks"`
}

func (x *TrackEgressRequest) Reset() {
	*x = TrackEgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEgressRequest) ProtoMessage() {}

func (x *TrackEgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEgressRequest.ProtoReflect.Descriptor instead.
func (*TrackEgressRequest) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{2}
}

func (x *TrackEgressRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (m *TrackEgressRequest) GetTracks() isTrackEgressRequest_Tracks {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (x *TrackEgressRequest) GetAllTracks() bool {
	if x, ok := x.GetTracks().(*TrackEgressRequest_AllTracks); ok {
		return x.AllTracks
	}
	return false
}

func (x *TrackEgressRequest) GetAllAudioTracks() bool {
	if x, ok := x.GetTracks().(*TrackEgressRequest_AllAudioTracks); ok {
		return x.AllAudioTracks
	}
	return false
}

func (x *TrackEgressRequest) GetAllVideoTracks() bool {
	if x, ok := x.GetTracks().(*TrackEgressRequest_AllVideoTracks); ok {
		return x.AllVideoTracks
	}
	return false
}

func (x *TrackEgressRequest) GetTrackList() *TrackList {
	if x, ok := x.GetTracks().(*TrackEgressRequest_TrackList); ok {
		return x.TrackList
	}
	return nil
}

type isTrackEgressRequest_Tracks interface {
	isTrackEgressRequest_Tracks()
}

type TrackEgressRequest_AllTracks struct {
	AllTracks bool `protobuf:"varint,2,opt,name=all_tracks,json=allTracks,proto3,oneof"`
}

type TrackEgressRequest_AllAudioTracks struct {
	AllAudioTracks bool `protobuf:"varint,3,opt,name=all_audio_tracks,json=allAudioTracks,proto3,oneof"`
}

type TrackEgressRequest_AllVideoTracks struct {
	AllVideoTracks bool `protobuf:"varint,4,opt,name=all_video_tracks,json=allVideoTracks,proto3,oneof"`
}

type TrackEgressRequest_TrackList struct {
	TrackList *TrackList `protobuf:"bytes,5,opt,name=track_list,json=trackList,proto3,oneof"`
}

func (*TrackEgressRequest_AllTracks) isTrackEgressRequest_Tracks() {}

func (*TrackEgressRequest_AllAudioTracks) isTrackEgressRequest_Tracks() {}

func (*TrackEgressRequest_AllVideoTracks) isTrackEgressRequest_Tracks() {}

func (*TrackEgressRequest_TrackList) isTrackEgressRequest_Tracks() {}

type TrackList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackIds []string `protobuf:"bytes,1,rep,name=track_ids,json=trackIds,proto3" json:"track_ids,omitempty"`
}

func (x *TrackList) Reset() {
	*x = TrackList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackList) ProtoMessage() {}

func (x *TrackList) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackList.ProtoReflect.Descriptor instead.
func (*TrackList) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{3}
}

func (x *TrackList) GetTrackIds() []string {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

type FileOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType FileType `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3,enum=livekit.FileType" json:"file_type,omitempty"` // required
}

func (x *FileOutput) Reset() {
	*x = FileOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOutput) ProtoMessage() {}

func (x *FileOutput) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOutput.ProtoReflect.Descriptor instead.
func (*FileOutput) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{4}
}

func (x *FileOutput) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_OGG
}

type StreamOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamProtocol StreamProtocol `protobuf:"varint,1,opt,name=stream_protocol,json=streamProtocol,proto3,enum=livekit.StreamProtocol" json:"stream_protocol,omitempty"` // required
	Urls           []string       `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`                                                                        // required
}

func (x *StreamOutput) Reset() {
	*x = StreamOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOutput) ProtoMessage() {}

func (x *StreamOutput) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOutput.ProtoReflect.Descriptor instead.
func (*StreamOutput) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{5}
}

func (x *StreamOutput) GetStreamProtocol() StreamProtocol {
	if x != nil {
		return x.StreamProtocol
	}
	return StreamProtocol_RTMP
}

func (x *StreamOutput) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type AdvancedOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width          int32           `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`                                         // (default 1920)
	Height         int32           `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`                                       // (default 1080)
	Depth          int32           `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`                                         // (default 24)
	Framerate      int32           `protobuf:"varint,4,opt,name=framerate,proto3" json:"framerate,omitempty"`                                 // (default 30)
	AudioBitrate   int32           `protobuf:"varint,5,opt,name=audio_bitrate,json=audioBitrate,proto3" json:"audio_bitrate,omitempty"`       // (default 128)
	AudioFrequency int32           `protobuf:"varint,6,opt,name=audio_frequency,json=audioFrequency,proto3" json:"audio_frequency,omitempty"` // (default 44100)
	VideoBitrate   int32           `protobuf:"varint,7,opt,name=video_bitrate,json=videoBitrate,proto3" json:"video_bitrate,omitempty"`       // (default 4500)
	Profile        EncodingProfile `protobuf:"varint,8,opt,name=profile,proto3,enum=livekit.EncodingProfile" json:"profile,omitempty"`        // (default PROFILE_MAIN)
}

func (x *AdvancedOptions) Reset() {
	*x = AdvancedOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedOptions) ProtoMessage() {}

func (x *AdvancedOptions) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedOptions.ProtoReflect.Descriptor instead.
func (*AdvancedOptions) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{6}
}

func (x *AdvancedOptions) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AdvancedOptions) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AdvancedOptions) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *AdvancedOptions) GetFramerate() int32 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *AdvancedOptions) GetAudioBitrate() int32 {
	if x != nil {
		return x.AudioBitrate
	}
	return 0
}

func (x *AdvancedOptions) GetAudioFrequency() int32 {
	if x != nil {
		return x.AudioFrequency
	}
	return 0
}

func (x *AdvancedOptions) GetVideoBitrate() int32 {
	if x != nil {
		return x.VideoBitrate
	}
	return 0
}

func (x *AdvancedOptions) GetProfile() EncodingProfile {
	if x != nil {
		return x.Profile
	}
	return EncodingProfile_PROFILE_BASELINE
}

type UpdateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressId         string   `protobuf:"bytes,1,opt,name=egress_id,json=egressId,proto3" json:"egress_id,omitempty"`
	AddOutputUrls    []string `protobuf:"bytes,2,rep,name=add_output_urls,json=addOutputUrls,proto3" json:"add_output_urls,omitempty"`
	RemoveOutputUrls []string `protobuf:"bytes,3,rep,name=remove_output_urls,json=removeOutputUrls,proto3" json:"remove_output_urls,omitempty"`
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateStreamRequest) GetEgressId() string {
	if x != nil {
		return x.EgressId
	}
	return ""
}

func (x *UpdateStreamRequest) GetAddOutputUrls() []string {
	if x != nil {
		return x.AddOutputUrls
	}
	return nil
}

func (x *UpdateStreamRequest) GetRemoveOutputUrls() []string {
	if x != nil {
		return x.RemoveOutputUrls
	}
	return nil
}

type UpdateTrackEgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressId      string   `protobuf:"bytes,1,opt,name=egress_id,json=egressId,proto3" json:"egress_id,omitempty"`
	StartTrackIds []string `protobuf:"bytes,2,rep,name=start_track_ids,json=startTrackIds,proto3" json:"start_track_ids,omitempty"`
	StopTrackIds  []string `protobuf:"bytes,3,rep,name=stop_track_ids,json=stopTrackIds,proto3" json:"stop_track_ids,omitempty"`
}

func (x *UpdateTrackEgressRequest) Reset() {
	*x = UpdateTrackEgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTrackEgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrackEgressRequest) ProtoMessage() {}

func (x *UpdateTrackEgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrackEgressRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrackEgressRequest) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTrackEgressRequest) GetEgressId() string {
	if x != nil {
		return x.EgressId
	}
	return ""
}

func (x *UpdateTrackEgressRequest) GetStartTrackIds() []string {
	if x != nil {
		return x.StartTrackIds
	}
	return nil
}

func (x *UpdateTrackEgressRequest) GetStopTrackIds() []string {
	if x != nil {
		return x.StopTrackIds
	}
	return nil
}

type StopEgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressId string `protobuf:"bytes,1,opt,name=egress_id,json=egressId,proto3" json:"egress_id,omitempty"`
}

func (x *StopEgressRequest) Reset() {
	*x = StopEgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopEgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEgressRequest) ProtoMessage() {}

func (x *StopEgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEgressRequest.ProtoReflect.Descriptor instead.
func (*StopEgressRequest) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{9}
}

func (x *StopEgressRequest) GetEgressId() string {
	if x != nil {
		return x.EgressId
	}
	return ""
}

type EgressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressId string `protobuf:"bytes,1,opt,name=egress_id,json=egressId,proto3" json:"egress_id,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName string `protobuf:"bytes,3,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Active   bool   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Types that are assignable to Info:
	//	*EgressInfo_Room
	//	*EgressInfo_Participant
	//	*EgressInfo_Track
	Info isEgressInfo_Info `protobuf_oneof:"info"`
}

func (x *EgressInfo) Reset() {
	*x = EgressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressInfo) ProtoMessage() {}

func (x *EgressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressInfo.ProtoReflect.Descriptor instead.
func (*EgressInfo) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{10}
}

func (x *EgressInfo) GetEgressId() string {
	if x != nil {
		return x.EgressId
	}
	return ""
}

func (x *EgressInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *EgressInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *EgressInfo) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (m *EgressInfo) GetInfo() isEgressInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *EgressInfo) GetRoom() *RoomEgressInfo {
	if x, ok := x.GetInfo().(*EgressInfo_Room); ok {
		return x.Room
	}
	return nil
}

func (x *EgressInfo) GetParticipant() *ParticipantEgressInfo {
	if x, ok := x.GetInfo().(*EgressInfo_Participant); ok {
		return x.Participant
	}
	return nil
}

func (x *EgressInfo) GetTrack() *TrackEgressInfoList {
	if x, ok := x.GetInfo().(*EgressInfo_Track); ok {
		return x.Track
	}
	return nil
}

type isEgressInfo_Info interface {
	isEgressInfo_Info()
}

type EgressInfo_Room struct {
	Room *RoomEgressInfo `protobuf:"bytes,5,opt,name=room,proto3,oneof"`
}

type EgressInfo_Participant struct {
	Participant *ParticipantEgressInfo `protobuf:"bytes,6,opt,name=participant,proto3,oneof"`
}

type EgressInfo_Track struct {
	Track *TrackEgressInfoList `protobuf:"bytes,7,opt,name=track,proto3,oneof"`
}

func (*EgressInfo_Room) isEgressInfo_Info() {}

func (*EgressInfo_Participant) isEgressInfo_Info() {}

func (*EgressInfo_Track) isEgressInfo_Info() {}

type RoomEgressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *RoomEgressRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	StartedAt int64              `protobuf:"varint,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt   int64              `protobuf:"varint,3,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Error     string             `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RoomEgressInfo) Reset() {
	*x = RoomEgressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomEgressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEgressInfo) ProtoMessage() {}

func (x *RoomEgressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEgressInfo.ProtoReflect.Descriptor instead.
func (*RoomEgressInfo) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{11}
}

func (x *RoomEgressInfo) GetRequest() *RoomEgressRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RoomEgressInfo) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RoomEgressInfo) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *RoomEgressInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ParticipantEgressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *ParticipantEgressRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	StartedAt int64                     `protobuf:"varint,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt   int64                     `protobuf:"varint,3,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Error     string                    `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ParticipantEgressInfo) Reset() {
	*x = ParticipantEgressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantEgressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantEgressInfo) ProtoMessage() {}

func (x *ParticipantEgressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantEgressInfo.ProtoReflect.Descriptor instead.
func (*ParticipantEgressInfo) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{12}
}

func (x *ParticipantEgressInfo) GetRequest() *ParticipantEgressRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ParticipantEgressInfo) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *ParticipantEgressInfo) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *ParticipantEgressInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TrackEgressInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *TrackEgressRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	TrackInfo []*TrackEgressInfo  `protobuf:"bytes,2,rep,name=track_info,json=trackInfo,proto3" json:"track_info,omitempty"`
}

func (x *TrackEgressInfoList) Reset() {
	*x = TrackEgressInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEgressInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEgressInfoList) ProtoMessage() {}

func (x *TrackEgressInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEgressInfoList.ProtoReflect.Descriptor instead.
func (*TrackEgressInfoList) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{13}
}

func (x *TrackEgressInfoList) GetRequest() *TrackEgressRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *TrackEgressInfoList) GetTrackInfo() []*TrackEgressInfo {
	if x != nil {
		return x.TrackInfo
	}
	return nil
}

type TrackEgressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId   string   `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	FileType  FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=livekit.FileType" json:"file_type,omitempty"`
	StartedAt int64    `protobuf:"varint,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt   int64    `protobuf:"varint,4,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Error     string   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackEgressInfo) Reset() {
	*x = TrackEgressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_egress_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEgressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEgressInfo) ProtoMessage() {}

func (x *TrackEgressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_egress_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEgressInfo.ProtoReflect.Descriptor instead.
func (*TrackEgressInfo) Descriptor() ([]byte, []int) {
	return file_livekit_egress_proto_rawDescGZIP(), []int{14}
}

func (x *TrackEgressInfo) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *TrackEgressInfo) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_OGG
}

func (x *TrackEgressInfo) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *TrackEgressInfo) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *TrackEgressInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_livekit_egress_proto protoreflect.FileDescriptor

var file_livekit_egress_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x1a,
	0x15, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x03, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x01, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xdd, 0x02, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x01, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x33,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x28, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x0f,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55,
	0x72, 0x6c, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x11, 0x53,
	0x74, 0x6f, 0x70, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xa8, 0x02,
	0x0a, 0x0a, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6f,
	0x6d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xac, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a,
	0x44, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x09, 0x0a, 0x05, 0x48, 0x44, 0x5f, 0x33, 0x30, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x44,
	0x5f, 0x36, 0x30, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x48, 0x44,
	0x5f, 0x33, 0x30, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x48, 0x44,
	0x5f, 0x36, 0x30, 0x10, 0x03, 0x2a, 0x4b, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x02, 0x32, 0xb3, 0x03, 0x0a, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x50, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x74, 0x6f,
	0x70, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x46, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0xaa,
	0x02, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xea,
	0x02, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_livekit_egress_proto_rawDescOnce sync.Once
	file_livekit_egress_proto_rawDescData = file_livekit_egress_proto_rawDesc
)

func file_livekit_egress_proto_rawDescGZIP() []byte {
	file_livekit_egress_proto_rawDescOnce.Do(func() {
		file_livekit_egress_proto_rawDescData = protoimpl.X.CompressGZIP(file_livekit_egress_proto_rawDescData)
	})
	return file_livekit_egress_proto_rawDescData
}

var file_livekit_egress_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_livekit_egress_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_livekit_egress_proto_goTypes = []interface{}{
	(OptionPreset)(0),                // 0: livekit.OptionPreset
	(EncodingProfile)(0),             // 1: livekit.EncodingProfile
	(*RoomEgressRequest)(nil),        // 2: livekit.RoomEgressRequest
	(*ParticipantEgressRequest)(nil), // 3: livekit.ParticipantEgressRequest
	(*TrackEgressRequest)(nil),       // 4: livekit.TrackEgressRequest
	(*TrackList)(nil),                // 5: livekit.TrackList
	(*FileOutput)(nil),               // 6: livekit.FileOutput
	(*StreamOutput)(nil),             // 7: livekit.StreamOutput
	(*AdvancedOptions)(nil),          // 8: livekit.AdvancedOptions
	(*UpdateStreamRequest)(nil),      // 9: livekit.UpdateStreamRequest
	(*UpdateTrackEgressRequest)(nil), // 10: livekit.UpdateTrackEgressRequest
	(*StopEgressRequest)(nil),        // 11: livekit.StopEgressRequest
	(*EgressInfo)(nil),               // 12: livekit.EgressInfo
	(*RoomEgressInfo)(nil),           // 13: livekit.RoomEgressInfo
	(*ParticipantEgressInfo)(nil),    // 14: livekit.ParticipantEgressInfo
	(*TrackEgressInfoList)(nil),      // 15: livekit.TrackEgressInfoList
	(*TrackEgressInfo)(nil),          // 16: livekit.TrackEgressInfo
	(FileType)(0),                    // 17: livekit.FileType
	(StreamProtocol)(0),              // 18: livekit.StreamProtocol
}
var file_livekit_egress_proto_depIdxs = []int32{
	6,  // 0: livekit.RoomEgressRequest.file:type_name -> livekit.FileOutput
	7,  // 1: livekit.RoomEgressRequest.stream:type_name -> livekit.StreamOutput
	0,  // 2: livekit.RoomEgressRequest.preset:type_name -> livekit.OptionPreset
	8,  // 3: livekit.RoomEgressRequest.advanced:type_name -> livekit.AdvancedOptions
	6,  // 4: livekit.ParticipantEgressRequest.file:type_name -> livekit.FileOutput
	7,  // 5: livekit.ParticipantEgressRequest.stream:type_name -> livekit.StreamOutput
	0,  // 6: livekit.ParticipantEgressRequest.preset:type_name -> livekit.OptionPreset
	8,  // 7: livekit.ParticipantEgressRequest.advanced:type_name -> livekit.AdvancedOptions
	5,  // 8: livekit.TrackEgressRequest.track_list:type_name -> livekit.TrackList
	17, // 9: livekit.FileOutput.file_type:type_name -> livekit.FileType
	18, // 10: livekit.StreamOutput.stream_protocol:type_name -> livekit.StreamProtocol
	1,  // 11: livekit.AdvancedOptions.profile:type_name -> livekit.EncodingProfile
	13, // 12: livekit.EgressInfo.room:type_name -> livekit.RoomEgressInfo
	14, // 13: livekit.EgressInfo.participant:type_name -> livekit.ParticipantEgressInfo
	15, // 14: livekit.EgressInfo.track:type_name -> livekit.TrackEgressInfoList
	2,  // 15: livekit.RoomEgressInfo.request:type_name -> livekit.RoomEgressRequest
	3,  // 16: livekit.ParticipantEgressInfo.request:type_name -> livekit.ParticipantEgressRequest
	4,  // 17: livekit.TrackEgressInfoList.request:type_name -> livekit.TrackEgressRequest
	16, // 18: livekit.TrackEgressInfoList.track_info:type_name -> livekit.TrackEgressInfo
	17, // 19: livekit.TrackEgressInfo.file_type:type_name -> livekit.FileType
	2,  // 20: livekit.Egress.StartRoomEgress:input_type -> livekit.RoomEgressRequest
	3,  // 21: livekit.Egress.StartParticipantEgress:input_type -> livekit.ParticipantEgressRequest
	4,  // 22: livekit.Egress.StartTrackEgress:input_type -> livekit.TrackEgressRequest
	9,  // 23: livekit.Egress.UpdateStream:input_type -> livekit.UpdateStreamRequest
	10, // 24: livekit.Egress.UpdateTrackEgress:input_type -> livekit.UpdateTrackEgressRequest
	11, // 25: livekit.Egress.StopEgress:input_type -> livekit.StopEgressRequest
	12, // 26: livekit.Egress.StartRoomEgress:output_type -> livekit.EgressInfo
	12, // 27: livekit.Egress.StartParticipantEgress:output_type -> livekit.EgressInfo
	12, // 28: livekit.Egress.StartTrackEgress:output_type -> livekit.EgressInfo
	12, // 29: livekit.Egress.UpdateStream:output_type -> livekit.EgressInfo
	12, // 30: livekit.Egress.UpdateTrackEgress:output_type -> livekit.EgressInfo
	12, // 31: livekit.Egress.StopEgress:output_type -> livekit.EgressInfo
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_livekit_egress_proto_init() }
func file_livekit_egress_proto_init() {
	if File_livekit_egress_proto != nil {
		return
	}
	file_livekit_ingress_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_livekit_egress_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomEgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantEgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTrackEgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopEgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomEgressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantEgressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEgressInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_egress_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEgressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_livekit_egress_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RoomEgressRequest_File)(nil),
		(*RoomEgressRequest_Stream)(nil),
		(*RoomEgressRequest_Preset)(nil),
		(*RoomEgressRequest_Advanced)(nil),
	}
	file_livekit_egress_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ParticipantEgressRequest_File)(nil),
		(*ParticipantEgressRequest_Stream)(nil),
		(*ParticipantEgressRequest_Preset)(nil),
		(*ParticipantEgressRequest_Advanced)(nil),
	}
	file_livekit_egress_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TrackEgressRequest_AllTracks)(nil),
		(*TrackEgressRequest_AllAudioTracks)(nil),
		(*TrackEgressRequest_AllVideoTracks)(nil),
		(*TrackEgressRequest_TrackList)(nil),
	}
	file_livekit_egress_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*EgressInfo_Room)(nil),
		(*EgressInfo_Participant)(nil),
		(*EgressInfo_Track)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_livekit_egress_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_livekit_egress_proto_goTypes,
		DependencyIndexes: file_livekit_egress_proto_depIdxs,
		EnumInfos:         file_livekit_egress_proto_enumTypes,
		MessageInfos:      file_livekit_egress_proto_msgTypes,
	}.Build()
	File_livekit_egress_proto = out.File
	file_livekit_egress_proto_rawDesc = nil
	file_livekit_egress_proto_goTypes = nil
	file_livekit_egress_proto_depIdxs = nil
}
